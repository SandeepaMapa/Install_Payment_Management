<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="kryptonButton1.StateCommon.Back.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        nUjRC0Ui0LRSGKKKBhRQMKKADtRSAO1HagBaSgAo70AHeigAopgL2pKAKIpwrZnmocKdUs0iOoFI1Q4U
        tSaIWloLQUopDCigYUUAFFAB2opAHaigAooAWkoAKKAFpKYC0lAFIU4VszzULTqlmqHUtI1QopaktC0t
        BaClpDAUUDCigAooAO1FAB2opAFFAC0negA70tACUGmAvakoAoinCtmeYh1OqWbIUGlpGiHA0tSaIWlo
        KCikMWigYUUDCigA7UUAHaikAtJQAtJ3oAO9LQAlLQAdqSmBn5NSVuzzEAPNOHepZohQTT6TNUGTS54N
        SaIXuKdSKQUUigzyKdQNBRQMKKACigAooAKKACigAooAKKACigD/2f/bAEMAAwICAwICAwMDAwQDAwQF
        CAUFBAQFCgcHBggMCgwMCwoLCw0OEhANDhEOCwsQFhARExQVFRUMDxcYFhQYEhQVFP/bAEMBAwQEBQQF
        CQUFCRQNCw0UFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFP/A
        ABEIAJYBhwMBIgACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMD
        AgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygp
        KjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOk
        paanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQAD
        AQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFR
        B2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZ
        WmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfI
        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
</value>
  </data>
</root>